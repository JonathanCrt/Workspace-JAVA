package fr.umlv.rental;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public abstract class AbstractVehicle implements Vehicle {
	private final int year;
	private ArrayList<Vehicle>vehicles;
	
	public int requirePositiveYear(int year) {
		if(year < 0) {
			throw new IllegalArgumentException("year must be positive");
		}
		return year;
	}
	
	/**
	 * @param year
	 */
	public AbstractVehicle(int year) {
		super();
		this.year = this.requirePositiveYear(year);
		this.vehicles= new ArrayList<Vehicle>();
	}
	
	/**
	 * return a list of cars with same year of build
	 * @param year
	 * @return
	 */
	public List<Vehicle> findAllByYear(int year) {
		return vehicles.stream()
		.filter(x -> x.getYear() == year)
		.collect(Collectors.toList());
	}
	
	
	@Override
	public int getYear() {
		return year;
	}

	@Override 
	public boolean equals(Object o) {
		if(!(o instanceof AbstractVehicle)) {
			return false;
		}
		AbstractVehicle abs = (AbstractVehicle)o;
		return  year == abs.year ;
	}
	
	@Override
	public int hashCode() {
		return  year;
	}
	
}
