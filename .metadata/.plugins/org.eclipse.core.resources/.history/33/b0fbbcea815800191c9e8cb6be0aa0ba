package tp4_mlv;


public class Main {
	
	@Override
	public String toString() {
		// TODO Auto-generated method stub
		return super.toString();
	}
	
	private int fooMlv;
	
	public int getFoo() {
		return fooMlv;
	}
	
	public void setFoo(int foo) {
		this.fooMlv = foo;
	}
	public Main(int foo) {
		super();
		this.fooMlv = foo;
	}
	
	
	/**
	 * Main
	 * @param args
	 */
	
	public static void main(String[] args) {
		System.out.println("Hello Eclipse");
		
		/* a = 2 + 3 + 4 */
		
		@SuppressWarnings("deprecation")
		Integer integer = new Integer(2);
		
		String s;
		
	}

	
	
	
	
	
	/**
	 * 7) 
	 * 		1. sysout + CTRL + Space dans un main  permet d'écrire rapidement  la méthode d'affichage System.out.println() (raccourci)
	 * 		2. toStr + CTRL + Space  dans une classe permet d'auto générer une nouvelle méthode toString() à rédéfinir.(avec l'annotation override)
	 * 		pour le compilateur.
	 * 		3. get + Ctrl + Space génère le getter associé au champ foo de la classe Main.
	 * 		   set + Ctrl + Space génère le setter associé au champ foo de la classe Main.
	 * 		4. Source > Generate constructor using fields()...
	 * 		5. On peut renommer notre classe. De même avec notre champ foo -> fooMlv
	 * 		6. 
	 * 		7. Si l'on fait Ctrl +1 l'IDE nous propose un ensamble d'options.
	 * 		8. On accède au code source de la classe String
	 * 		9.	On accéde au code source de la méthode toString() et code source de la première classe Object
	 * 			toString hérite de la classe Object.
	 * 	    10.	Ctrl + Shift + G recherche les élements associé au champ foo (accesseurs, constructeur..)
	 * 		11. Réalise les imports néccèssaires.
	 */
	
}
