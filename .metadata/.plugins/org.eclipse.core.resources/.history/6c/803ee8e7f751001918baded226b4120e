package tp3_mlv;

import java.util.ArrayList;

public class Liberte  {
	public static void main(String[] args) {
		/*
		Book b1 = new Book("Da Java Code", "Duke Brown");
	    Book b2 = b1;
	    Book b3 = new Book("Da Java Code", "Duke Brown");

	    System.out.println(b1 == b2);
	    System.out.println(b1 == b3);
	    */
	    
	    /* 
	     * 1. Le code source ci-dessus affiche : 
	     *    Affichage n°1 : true.
		 *    Affichage n°2 : false.
		 *  
		 *    En premier, true est affiché 
		 *    car la JVM à créee un seul objet 
	     *    qu'elle a affecté aux 2 variables b1 et b2 (optimisation)
	     *    b1 et b2 pointe vers le même objet
		 *  
		 * 	  En revanche, on remarque dans un second temps que false est affiché car on a 
		 *    crée une nouvelle chaine de caractére avec le mot clé new, ce qui fait que 
		 *    l'on compare deux réfèrences qui ne sont pas identiques.
		 *    Les variables b1 et b3 ne pointe donc pas vers le même objet.
		 *    
		 *    
		 * 3. La méthode indexOf de la classe ArrayList prend en argument un objet o et 
		 * 	  renvoie l'index de la première occurrence de l'élément spécifié dans cette liste.
		 * 	  La méthode renvoie -1 si la l'élément n'est pas contenue dans la liste.
		 * 
	     * */
	    Book harry = new Book("Harry Potter et la Chambre des secrets", "J.K Rowling");
	    Book harry2 = new Book("Harry Potter et la Chambre des secrets", "J.K Rowwling");
		
	    System.out.println(Book.compareTwoString(harry.getTitle(), harry.getAuthor(), 
	    		           harry2.getTitle(), harry2.getAuthor()));
	    
	    /* 4.
	     *  */
	        Book b1 = new Book("Da Java Code", "Duke Brown");
	        Book b2 = b1;
	        Book b3 = new Book("Da Java Code", "Duke Brown");

	        ArrayList list = new ArrayList();
	        list.add(b1);
	        System.out.println(list.indexOf(b2));
	        System.out.println(list.indexOf(b3));
	      
	    
	    
	}
}
