package fr.umlv.movies;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.stream.Stream;

import com.sun.tools.classfile.StackMap_attribute.stack_map_frame;

public class Main {
	/**
	 * 1) La classe java.nio.file.Path a été introduite la classe après java.io.File
	 *  (dans la version 7 de Java). Le package java.nio.file reprend la quasi totalité 
	 *  des fonctionnalités de java.io.File en tentant de les améliorer. 
	 *  Par exemple avant les méthodes ne levaient pas d’exception en cas d’erreur, 
	 *  la fonction de renommage des fichiers étaient instables, on ne pouvait modifier 
	 *  les permissions des fichiers. La classe java.nio.file.Path est celle qui se rapproche 
	 *  le plus dans son fonctionnement de java.io.File.
		java.io.File est destinée à ne plus être utilisée.
		Il faut mieux utiliser le Path que File à cause de l'encodage.
		factory : méthode statique qui permet de fabriquer un objet.
		try/catch -> 
		7) On utilise un try pour reprendre sur l'erreur, gérer l'exception.
	 */
	
	public static void main(String[] args) throws IOException {
		
		var path = Path.of("data/movies.txt");
		Stream<String> st = Files.lines(path);
		/*
		try {
			// Créer un stream des lignes du fichier
			st = Files.lines(path);
			
		} catch (IOException e) {
			
			return;
		
		}
		*/
		try {
			st.forEach(System.out::println);
		}
		finally{
			st.close();
		}
	
	}
	
	
	
	
	
	
}
